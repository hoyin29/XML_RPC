#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

#include <xmlrpc-c/base.h>
#include <xmlrpc-c/client.h>
#include <xmlrpc-c/client_global.h>
#include <xmlrpc-c/config.h>
/* information about this build environment */

#define NAME "Multi Xmlrpc-c Asynchronous Test Client"
#define VERSION "1.0"

#define DEBUG

int
main(int           const argc, 
     const char ** const argv)
{
  const char* const methodName = "sample.add";

  xmlrpc_env env;
  xmlrpc_env_init(&env);

  //create a global client
  xmlrpc_client_init2(&env, XMLRPC_CLIENT_NO_FLAGS, NAME, VERSION, NULL, 0);

  // create a multi_server_info struct
  multi_server_info_t multiServerInfo;

  multiServerInfo.numberOfServer = 3; // 3 servers, 8080, 8081, 8082
  multiServerInfo.serverUrlArray = malloc(sizeof(char *) *
					  multiServerInfo.numberOfServer);
  multiServerInfo.serverUrlArray[0] = "http://localhost:8080/RPC2";
  multiServerInfo.serverUrlArray[1] = "http://localhost:8081/RPC2";
  multiServerInfo.serverUrlArray[2] = "http://localhost:8082/RPC2";

  // how many times we need to run our multirpc_globalclient_asynch()
  //int * requestsForMultiRpc = malloc(sizeof(int));
  int requestsForMultiRpc = atoi(argv[1]);

  // in one single multi rpc call, how many requests we need to send
  // each server will get one request, so it is equal to number of server
  //int * requestsRequired = malloc(sizeof(int));
  int requestsRequired = multiServerInfo.numberOfServer;

  int counter;

  for (counter = 0; counter < (requestsForMultiRpc); ++counter)
    {
      // requestsRequired shows how many threads need to be created in 
      // the belowing function
      multirpc_globalclient_asynch(&multiServerInfo, methodName, 
				   requestsRequired);
      
      printf("RPCs all requested.  Waiting for & handling responses...\n");
      
    }

  sleep(10);

  xmlrpc_client_cleanup();

  return 0;
}
